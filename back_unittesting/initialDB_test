"""_summary_
    
    in this test, our goal is to make a mock .db instance in our local directory
    and then practice adding and retrieving tuples
"""
import unittest
import sqlite3
import os
import csv
dir=os.getcwd()
db_file_name='mcreads_test.db'

def initialize(db_file_name):
    #will be called by open_database() in app.py
        connection=sqlite3.connect(db_file_name)
        cursor = connection.cursor()
        
        # create tables
        # users table..
        # we will have multiple tables initialized but for now we're just 
        # going to create and back up the data for the Users table
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS Users (
                userID INTEGER PRIMARY KEY,
                username TEXT,
                password TEXT,
                email TEXT
            )
    ''')
        
        users_table_backup_file = os.path.join(dir,'users-table-backup1.csv')
        
        # back up data if there is any
        with open(users_table_backup_file, 'r') as file:
            csv_reader = csv.reader(file)
        # skip the header row if it exists
            next(csv_reader, None)
            for row in csv_reader:
                cursor.execute(f'INSERT OR IGNORE INTO Users (userID,username,password,email) VALUES (?,?,?,?)', (row[0],row[1],row[2],row[3]))
                
        connection.commit()
        connection.close()


class TestDatabaseInitialization(unittest.TestCase):

    def setUp(self):
        self.db_file_name = db_file_name
        self.connection = sqlite3.connect(self.db_file_name)
        self.cursor = self.connection.cursor()

    def tearDown(self):
        self.connection.close()

    def test_initialize_function(self):
        mock_data = [
            (1, 'user1', 'password1', 'user1@example.com'),
            (2, 'user2', 'password2', 'user2@example.com'),
        ]

        mock_file_path = 'users-table-backup1.csv'
        with open(mock_file_path, 'w', newline='') as mock_file:
            csv_writer = csv.writer(mock_file)
            csv_writer.writerow(['userID', 'username', 'password', 'email'])
            csv_writer.writerows(mock_data)

        # Call the initialize function
        initialize(self.db_file_name)

        # Query the Users table and check if the data was inserted
        self.cursor.execute('SELECT * FROM Users')
        result = self.cursor.fetchall()

        # Assert that the result matches the mock data
        self.assertEqual(result, mock_data)

if __name__ == '__main__':
    unittest.main()    